# maths 
print(5+3)
print(5-3)
print(5*3)
print(5/3)
print(5//3)
print(5%3)
print(5**3)

print(2**3**2)
# 3**2 = 9
# 2**9 = 512
print(2**9)

# python has different operators
# Arithmetic Operators
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | Operator   | Example | Meaning                                       | Result                                                                                                                      |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | + (unary)  | +a      | Unary Positive                                | a                                                                                                                           |
# |            |         |                                               | In other words, it doesnâ€™t really do anything. It mostly exists for the sake of completeness, to complement Unary Negation. |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | + (binary) | a + b   | Addition                                      | Sum of a and b                                                                                                              |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | - (unary)  | -a      | Unary Negation                                | Value equal to a but opposite in sign                                                                                       |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | - (binary) | a - b   | Subtraction                                   | b subtracted from a                                                                                                         |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | *          | a * b   | Multiplication                                | Product of a and b                                                                                                          |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | /          | a / b   | Division                                      | Quotient when a is divided by b.                                                                                            |
# |            |         |                                               | The result always has type float.                                                                                           |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | %          | a % b   | Modulo                                        | Remainder when a is divided by b                                                                                            |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | //         | a // b  | Floor Division (also called Integer Division) | Quotient when a is divided by b, rounded to the next smallest whole number                                                  |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+
# | **         | a ** b  | Exponentiation                                | a raised to the power of b                                                                                                  |
# +------------+---------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------+

# Comparison Operators
# +----------+---------+--------------------------+---------------------------------------------------+
# | Operator | Example | Meaning                  | Result                                            |
# +----------+---------+--------------------------+---------------------------------------------------+
# | ==       | a == b  | Equal to                 | True if the value of a is equal to the value of b |
# |          |         |                          | False otherwise                                   |
# +----------+---------+--------------------------+---------------------------------------------------+
# | !=       | a != b  | Not equal to             | True if a is not equal to b                       |
# |          |         |                          | False otherwise                                   |
# +----------+---------+--------------------------+---------------------------------------------------+
# | <        | a < b   | Less than                | True if a is less than b                          |
# |          |         |                          | False otherwise                                   |
# +----------+---------+--------------------------+---------------------------------------------------+
# | <=       | a <= b  | Less than or equal to    | True if a is less than or equal to b              |
# |          |         |                          | False otherwise                                   |
# +----------+---------+--------------------------+---------------------------------------------------+
# | >        | a > b   | Greater than             | True if a is greater than b                       |
# |          |         |                          | False otherwise                                   |
# +----------+---------+--------------------------+---------------------------------------------------+
# | >=       | a >= b  | Greater than or equal to | True if a is greater than or equal to b           |
# |          |         |                          | False otherwise                                   |
# +----------+---------+--------------------------+---------------------------------------------------+

# Logical Operators
# +----------+---------+-------------------------------------+
# | Operator | Example | Meaning                             |
# +----------+---------+-------------------------------------+
# | not      | not x   | True if x is False                  |
# |          |         | False if x is True                  |
# |          |         | (Logically reverses the sense of x) |
# +----------+---------+-------------------------------------+
# | or       | x or y  | True if either x or y is True       |
# |          |         | False otherwise                     |
# +----------+---------+-------------------------------------+
# | and      | x and y | True if both x and y are True       |
# |          |         | False otherwise                     |
# +----------+---------+-------------------------------------+

# Bitwise Operators
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | Operator | Example | Meaning                    | Result                                                                                                                                                                               |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | &        | a & b   | bitwise AND                | Each bit position in the result is the logical AND of the bits in the corresponding position of the operands. (1 if both are 1, otherwise 0.)                                        |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | |        | a | b   | bitwise OR                 | Each bit position in the result is the logical OR of the bits in the corresponding position of the operands. (1 if either is 1, otherwise 0.)                                        |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | ~        | ~a      | bitwise negation           | Each bit position in the result is the logical negation of the bit in the corresponding position of the operand. (1 if 0, 0 if 1.)                                                   |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | ^        | a ^ b   | bitwise XOR (exclusive OR) | Each bit position in the result is the logical XOR of the bits in the corresponding position of the operands. (1 if the bits in the operands are different, 0 if they are the same.) |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | >>       | a >> n  | Shift right n places       | Each bit is shifted right n places.                                                                                                                                                  |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
# | <<       | a << n  | Shift left n places        | Each bit is shifted left n places.                                                                                                                                                   |
# +----------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

# Identity Operators
# is and is not (use id() function to check)

# Operator Precedence
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | Operator                         | Description                                      |
# +--------------------+----------------------------------+--------------------------------------------------+
# | lowest precedence  | or                               | Boolean OR                                       |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | and                              | Boolean AND                                      |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | not                              | Boolean NOT                                      |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | ==, !=, <, <=, >, >=, is, is not | comparisons, identity                            |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | |                                | bitwise OR                                       |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | ^                                | bitwise XOR                                      |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | &                                | bitwise AND                                      |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | <<, >>                           | bit shifts                                       |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | +, -                             | addition, subtraction                            |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | *, /, //, %                      | multiplication, division, floor division, modulo |
# +--------------------+----------------------------------+--------------------------------------------------+
# |                    | +x, -x, ~x                       | unary positive, unary negation, bitwise negation |
# +--------------------+----------------------------------+--------------------------------------------------+
# | highest precedence | **                               | exponentiation                                   |
# +--------------------+----------------------------------+--------------------------------------------------+

# +-------------+---------------------------------+
# | operators   | precedence & associativity rule |
# +-------------+---------------------------------+
# | parenthese  | highest                         |
# +-------------+---------------------------------+
# | exponent    | right to left                   |
# +-------------+---------------------------------+
# | *, /, //, % | left to right                   |
# +-------------+---------------------------------+
# | +, -        | left to right                   |
# +-------------+---------------------------------+

# Augmented Assignment Operators
# +------------+------------------+------------+
# | Augmented  |                  | Standard   |
# | Assignment |                  | Assignment |
# +------------+------------------+------------+
# | a += 5     | is equivalent to | a = a + 5  |
# +------------+------------------+------------+
# | a /= 10    | is equivalent to | a = a / 10 |
# +------------+------------------+------------+
# | a ^= b     | is equivalent to | a = a ^ b  |
# +------------+------------------+------------+